"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BoundPorts = void 0;
const port_1 = require("./port");
class BoundPorts {
    constructor() {
        this.ports = new Map();
    }
    getBinding(port) {
        const binding = this.ports.get(port);
        if (!binding) {
            throw new Error(`No port binding found for :${port}`);
        }
        return binding;
    }
    getFirstBinding() {
        const firstBinding = this.ports.values().next().value;
        if (!firstBinding) {
            throw new Error("No port bindings found");
        }
        else {
            return firstBinding;
        }
    }
    setBinding(key, value) {
        this.ports.set(key, value);
    }
    iterator() {
        return this.ports;
    }
    filter(ports) {
        const boundPorts = new BoundPorts();
        const containerPorts = ports.map((port) => (0, port_1.getContainerPort)(port));
        for (const [internalPort, hostPort] of this.iterator()) {
            if (containerPorts.includes(internalPort)) {
                boundPorts.setBinding(internalPort, hostPort);
            }
        }
        return boundPorts;
    }
    static fromInspectResult(hostIps, inspectResult) {
        const boundPorts = new BoundPorts();
        Object.entries(inspectResult.ports).forEach(([containerPort, hostBindings]) => {
            const hostPort = (0, port_1.resolveHostPortBinding)(hostIps, hostBindings);
            boundPorts.setBinding(parseInt(containerPort), hostPort);
        });
        return boundPorts;
    }
}
exports.BoundPorts = BoundPorts;
