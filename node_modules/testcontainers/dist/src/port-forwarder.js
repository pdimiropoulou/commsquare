"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PortForwarderInstance = exports.PortForwarder = void 0;
const ssh_remote_port_forward_1 = require("ssh-remote-port-forward");
const logger_1 = require("./logger");
const generic_container_1 = require("./generic-container/generic-container");
const uuid_1 = require("./uuid");
const session_id_1 = require("./docker/session-id");
const docker_client_1 = require("./docker/client/docker-client");
const images_1 = require("./images");
class PortForwarder {
    constructor(sshConnection, container) {
        this.sshConnection = sshConnection;
        this.container = container;
    }
    exposeHostPort(port) {
        return __awaiter(this, void 0, void 0, function* () {
            logger_1.log.info(`Exposing host port ${port}...`);
            yield this.sshConnection.remoteForward("localhost", port);
            logger_1.log.info(`Exposed host port ${port}`);
        });
    }
    getNetworkId() {
        return this.container.getNetworkId(this.getNetworkName());
    }
    getIpAddress() {
        return this.container.getIpAddress(this.getNetworkName());
    }
    getNetworkName() {
        return this.container.getNetworkNames()[0];
    }
}
exports.PortForwarder = PortForwarder;
class PortForwarderInstance {
    static isRunning() {
        return this.instance !== undefined;
    }
    static getInstance() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.instance) {
                this.instance = this.createInstance();
            }
            return this.instance;
        });
    }
    static createInstance() {
        return __awaiter(this, void 0, void 0, function* () {
            logger_1.log.debug(`Creating new Port Forwarder...`);
            const username = "root";
            const password = new uuid_1.RandomUuid().nextUuid();
            const containerPort = process.env["TESTCONTAINERS_SSHD_PORT"]
                ? { container: 22, host: Number(process.env["TESTCONTAINERS_SSHD_PORT"]) }
                : 22;
            const container = yield new generic_container_1.GenericContainer(images_1.SSHD_IMAGE)
                .withName(`testcontainers-port-forwarder-${session_id_1.sessionId}`)
                .withExposedPorts(containerPort)
                .withEnvironment({ PASSWORD: password })
                .withCommand([
                "sh",
                "-c",
                `echo "${username}:$PASSWORD" | chpasswd && /usr/sbin/sshd -D -o PermitRootLogin=yes -o AddressFamily=inet -o GatewayPorts=yes -o AllowAgentForwarding=yes -o AllowTcpForwarding=yes -o KexAlgorithms=+diffie-hellman-group1-sha1 -o HostkeyAlgorithms=+ssh-rsa`,
            ])
                .start();
            const host = (yield (0, docker_client_1.getDockerClient)()).host;
            const port = container.getMappedPort(22);
            logger_1.log.debug(`Connecting to Port Forwarder on "${host}:${port}"...`);
            const connection = yield (0, ssh_remote_port_forward_1.createSshConnection)({ host, port, username, password });
            logger_1.log.debug(`Connected to Port Forwarder on "${host}:${port}"`);
            connection.unref();
            return new PortForwarder(connection, container);
        });
    }
}
exports.PortForwarderInstance = PortForwarderInstance;
