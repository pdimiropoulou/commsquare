"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getSystemInfo = void 0;
const logger_1 = require("./logger");
const docker_compose_1 = require("docker-compose");
const get_info_1 = require("./docker/functions/get-info");
let systemInfo;
const getSystemInfo = (dockerode) => __awaiter(void 0, void 0, void 0, function* () {
    var _a;
    if (systemInfo !== undefined) {
        return systemInfo;
    }
    logger_1.log.debug("Fetching system info...");
    const nodeInfo = getNodeInfo();
    const dockerInfo = yield (0, get_info_1.getDockerInfo)(dockerode);
    const dockerComposeInfo = yield getDockerComposeInfo();
    systemInfo = { nodeInfo, dockerInfo, dockerComposeInfo };
    logger_1.log.debug(`Node version: ${nodeInfo.version}, Platform: ${nodeInfo.platform}, Arch: ${nodeInfo.architecture}, OS: ${dockerInfo.operatingSystem}, Version: ${dockerInfo.serverVersion}, Arch: ${dockerInfo.architecture}, CPUs: ${dockerInfo.cpus}, Memory: ${dockerInfo.memory}, Compose installed: ${dockerComposeInfo !== undefined}, Compose version: ${(_a = dockerComposeInfo === null || dockerComposeInfo === void 0 ? void 0 : dockerComposeInfo.version) !== null && _a !== void 0 ? _a : "N/A"}`);
    return systemInfo;
});
exports.getSystemInfo = getSystemInfo;
const getNodeInfo = () => {
    return {
        version: process.version,
        architecture: process.arch,
        platform: process.platform,
    };
};
const getDockerComposeInfo = () => __awaiter(void 0, void 0, void 0, function* () {
    try {
        return {
            version: (yield (0, docker_compose_1.version)()).data.version,
        };
    }
    catch (err) {
        logger_1.log.info(`Unable to detect docker-compose version, is it installed? ${err}`);
        return undefined;
    }
});
