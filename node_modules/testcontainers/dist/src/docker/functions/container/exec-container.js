"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.execContainer = void 0;
const logger_1 = require("../../../logger");
const byline_1 = __importDefault(require("byline"));
const demux_stream_1 = require("../demux-stream");
const execContainer = (dockerode, containerRuntime, container, command, shouldLog = true) => __awaiter(void 0, void 0, void 0, function* () {
    const chunks = [];
    try {
        const exec = yield container.exec({
            Cmd: command,
            AttachStdout: true,
            AttachStderr: true,
        });
        const stream = yield startExec(dockerode, containerRuntime, exec, container);
        stream.on("data", (chunk) => chunks.push(chunk));
        if (shouldLog && logger_1.execLog.enabled()) {
            (0, byline_1.default)(stream).on("data", (line) => logger_1.execLog.trace(line, { containerId: container.id }));
        }
        const exitCode = yield waitForExec(exec, stream);
        stream.destroy();
        return { output: chunks.join(""), exitCode };
    }
    catch (err) {
        logger_1.log.error(`Failed to exec container with command "${command.join(" ")}": ${err}: ${chunks.join("")}`, {
            containerId: container.id,
        });
        throw err;
    }
});
exports.execContainer = execContainer;
const startExec = (dockerode, containerRuntime, exec, container) => __awaiter(void 0, void 0, void 0, function* () {
    try {
        const stream = yield exec.start({ stdin: true, Detach: false, Tty: true });
        if (containerRuntime === "podman") {
            return (0, demux_stream_1.demuxStream)(dockerode, stream);
        }
        else {
            return stream;
        }
    }
    catch (err) {
        logger_1.log.error(`Failed to start exec: ${err}`, { containerId: container.id });
        throw err;
    }
});
const waitForExec = (exec, stream) => __awaiter(void 0, void 0, void 0, function* () {
    yield new Promise((res, rej) => {
        stream.on("end", res);
        stream.on("error", rej);
    });
    const inspectResult = yield exec.inspect();
    return inspectResult.ExitCode === null ? -1 : inspectResult.ExitCode;
});
