"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.inspectContainer = void 0;
const logger_1 = require("../../../logger");
const inspectContainer = (container) => __awaiter(void 0, void 0, void 0, function* () {
    try {
        const inspectResult = yield container.inspect();
        const finishedAt = new Date(inspectResult.State.FinishedAt);
        return {
            name: inspectResult.Name,
            hostname: inspectResult.Config.Hostname,
            ports: getPorts(inspectResult),
            healthCheckStatus: getHealthCheckStatus(inspectResult),
            networkSettings: getNetworkSettings(inspectResult),
            state: {
                status: inspectResult.State.Status,
                running: inspectResult.State.Running,
                startedAt: new Date(inspectResult.State.StartedAt),
                finishedAt: finishedAt.getTime() < 0 ? undefined : finishedAt,
            },
            labels: inspectResult.Config.Labels,
        };
    }
    catch (err) {
        logger_1.log.error(`Failed to inspect container: ${err}`, { containerId: container.id });
        throw err;
    }
});
exports.inspectContainer = inspectContainer;
const getPorts = (inspectInfo) => Object.entries(inspectInfo.NetworkSettings.Ports)
    .filter(([, hostPorts]) => hostPorts !== null)
    .map(([containerPortAndProtocol, hostPorts]) => {
    const containerPort = parseInt(containerPortAndProtocol.split("/")[0]);
    return {
        [containerPort]: hostPorts.map((hostPort) => ({
            hostIp: hostPort.HostIp,
            hostPort: parseInt(hostPort.HostPort),
        })),
    };
})
    .reduce((acc, curr) => (Object.assign(Object.assign({}, acc), curr)), {});
const getHealthCheckStatus = (inspectResult) => {
    const health = inspectResult.State.Health;
    if (health === undefined) {
        return "none";
    }
    else {
        return health.Status;
    }
};
const getNetworkSettings = (inspectResult) => Object.entries(inspectResult.NetworkSettings.Networks)
    .map(([networkName, network]) => ({
    [networkName]: {
        networkId: network.NetworkID,
        ipAddress: network.IPAddress,
    },
}))
    .reduce((prev, next) => (Object.assign(Object.assign({}, prev), next)), {});
