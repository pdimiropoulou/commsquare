"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getContainerByHash = exports.getContainerById = void 0;
const docker_client_1 = require("../../client/docker-client");
const logger_1 = require("../../../logger");
const labels_1 = require("../../../labels");
const getContainerById = (id) => __awaiter(void 0, void 0, void 0, function* () {
    try {
        const { dockerode } = yield (0, docker_client_1.getDockerClient)();
        return dockerode.getContainer(id);
    }
    catch (err) {
        logger_1.log.error(`Failed to get container by ID: ${err}`);
        throw err;
    }
});
exports.getContainerById = getContainerById;
const getContainerByHash = (hash) => __awaiter(void 0, void 0, void 0, function* () {
    try {
        const { dockerode } = yield (0, docker_client_1.getDockerClient)();
        const containers = yield dockerode.listContainers({
            limit: 1,
            filters: {
                status: ["running"],
                label: [`${labels_1.LABEL_TESTCONTAINERS_CONTAINER_HASH}=${hash}`],
            },
        });
        if (containers.length === 0) {
            return undefined;
        }
        else {
            return yield (0, exports.getContainerById)(containers[0].Id);
        }
    }
    catch (err) {
        logger_1.log.error(`Failed to get container by hash "${hash}": ${err}`);
        throw err;
    }
});
exports.getContainerByHash = getContainerByHash;
