import { DockerImageName } from "../../../docker-image-name";
import Dockerode from "dockerode";
import { PortWithOptionalBinding } from "../../../port";
import { BindMount, Environment, ExtraHost, HealthCheck, Labels, ResourcesQuota, TmpFs, Ulimits } from "../../types";
export type CreateContainerOptions = {
    imageName: DockerImageName;
    environment: Environment;
    command: string[];
    entrypoint?: string[];
    bindMounts: BindMount[];
    tmpFs: TmpFs;
    exposedPorts: PortWithOptionalBinding[];
    name?: string;
    reusable: boolean;
    labels?: Labels;
    networkMode?: string;
    healthCheck?: HealthCheck;
    useDefaultLogDriver: boolean;
    privilegedMode: boolean;
    autoRemove: boolean;
    extraHosts: ExtraHost[];
    ipcMode?: string;
    ulimits?: Ulimits;
    addedCapabilities?: string[];
    droppedCapabilities?: string[];
    user?: string;
    workingDir?: string;
    resourcesQuota?: ResourcesQuota;
};
export declare const createContainer: (options: CreateContainerOptions) => Promise<Dockerode.Container>;
