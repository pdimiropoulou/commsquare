"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.imageExists = void 0;
const async_lock_1 = __importDefault(require("async-lock"));
const existingImages = new Set();
const imageCheckLock = new async_lock_1.default();
const imageExists = (dockerode, imageName) => __awaiter(void 0, void 0, void 0, function* () {
    return imageCheckLock.acquire(imageName.toString(), () => __awaiter(void 0, void 0, void 0, function* () {
        if (existingImages.has(imageName.toString())) {
            return true;
        }
        try {
            yield dockerode.getImage(imageName.toString()).inspect();
            existingImages.add(imageName.toString());
            return true;
        }
        catch (err) {
            if (err instanceof Error && err.message.toLowerCase().includes("no such image")) {
                return false;
            }
            throw err;
        }
    }));
});
exports.imageExists = imageExists;
