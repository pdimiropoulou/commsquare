"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.buildImage = void 0;
const logger_1 = require("../../../logger");
const tar_fs_1 = __importDefault(require("tar-fs"));
const byline_1 = __importDefault(require("byline"));
const docker_client_1 = require("../../client/docker-client");
const create_labels_1 = require("../create-labels");
const path_1 = __importDefault(require("path"));
const fs_1 = require("fs");
const dockerignore_1 = __importDefault(require("@balena/dockerignore"));
const buildImage = (options) => __awaiter(void 0, void 0, void 0, function* () {
    try {
        logger_1.log.info(`Building image "${options.imageName.toString()}" with context "${options.context}"...`);
        const isDockerIgnored = yield createIsDockerIgnoredFunction(options.context);
        const tarStream = tar_fs_1.default.pack(options.context, {
            ignore: (aPath) => {
                const relativePath = path_1.default.relative(options.context, aPath);
                if (relativePath === options.dockerfileName) {
                    return false;
                }
                else {
                    return isDockerIgnored(relativePath);
                }
            },
        });
        const { dockerode } = yield (0, docker_client_1.getDockerClient)();
        const buildImageOptions = {
            dockerfile: options.dockerfileName,
            nocache: !options.cache,
            buildargs: options.buildArgs,
            t: options.imageName.toString(),
            labels: (0, create_labels_1.createLabels)(false, options.imageName),
            registryconfig: options.registryConfig,
            pull: options.pullPolicy.shouldPull() ? "true" : undefined,
        };
        yield new Promise((resolve) => {
            dockerode
                .buildImage(tarStream, buildImageOptions)
                .then((stream) => (0, byline_1.default)(stream))
                .then((stream) => {
                stream.setEncoding("utf-8");
                stream.on("data", (line) => {
                    if (logger_1.buildLog.enabled()) {
                        logger_1.buildLog.trace(line, { imageName: options.imageName.toString() });
                    }
                });
                stream.on("end", () => resolve());
            });
        });
        logger_1.log.info(`Built image "${options.imageName.toString()}" with context "${options.context}"`);
    }
    catch (err) {
        logger_1.log.error(`Failed to build image: ${err}`);
        throw err;
    }
});
exports.buildImage = buildImage;
const createIsDockerIgnoredFunction = (context) => __awaiter(void 0, void 0, void 0, function* () {
    const dockerIgnoreFilePath = path_1.default.join(context, ".dockerignore");
    if (!(0, fs_1.existsSync)(dockerIgnoreFilePath)) {
        return () => false;
    }
    const instance = (0, dockerignore_1.default)({ ignorecase: false });
    const dockerIgnorePatterns = yield fs_1.promises.readFile(dockerIgnoreFilePath, { encoding: "utf-8" });
    instance.add(dockerIgnorePatterns);
    const filter = instance.createFilter();
    return (aPath) => !filter(aPath);
});
