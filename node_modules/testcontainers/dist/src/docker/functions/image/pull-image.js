"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.pullImage = void 0;
const logger_1 = require("../../../logger");
const image_exists_1 = require("./image-exists");
const get_auth_config_1 = require("../../../registry-auth-locator/get-auth-config");
const async_lock_1 = __importDefault(require("async-lock"));
const byline_1 = __importDefault(require("byline"));
const imagePullLock = new async_lock_1.default();
const pullImage = (dockerode, indexServerAddress, options) => __awaiter(void 0, void 0, void 0, function* () {
    try {
        return imagePullLock.acquire(options.imageName.toString(), () => __awaiter(void 0, void 0, void 0, function* () {
            var _a;
            if (!options.force && (yield (0, image_exists_1.imageExists)(dockerode, options.imageName))) {
                logger_1.log.debug(`Not pulling image "${options.imageName}" as it already exists`);
                return;
            }
            logger_1.log.info(`Pulling image "${options.imageName}"...`);
            const authconfig = yield (0, get_auth_config_1.getAuthConfig)((_a = options.imageName.registry) !== null && _a !== void 0 ? _a : indexServerAddress);
            const stream = yield dockerode.pull(options.imageName.toString(), { authconfig });
            return new Promise((resolve) => {
                (0, byline_1.default)(stream).on("data", (line) => {
                    if (logger_1.pullLog.enabled()) {
                        logger_1.pullLog.trace(line, { imageName: options.imageName.toString() });
                    }
                });
                stream.on("end", resolve);
            });
        }));
    }
    catch (err) {
        logger_1.log.error(`Failed to pull image "${options.imageName}": ${err}`);
        throw err;
    }
});
exports.pullImage = pullImage;
