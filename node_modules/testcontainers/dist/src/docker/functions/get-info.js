"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getDockerInfo = void 0;
const logger_1 = require("../../logger");
const getDockerInfo = (dockerode) => __awaiter(void 0, void 0, void 0, function* () {
    const info = yield dockerode.info();
    return {
        serverVersion: info.ServerVersion,
        operatingSystem: info.OperatingSystem,
        operatingSystemType: info.OSType,
        architecture: info.Architecture,
        cpus: info.NCPU,
        memory: info.MemTotal,
        indexServerAddress: getIndexServerAddress(info),
    };
});
exports.getDockerInfo = getDockerInfo;
// https://github.com/containers/podman/issues/17776
// eslint-disable-next-line @typescript-eslint/no-explicit-any
const getIndexServerAddress = (info) => {
    if (isUndefinedOrEmpty(info.IndexServerAddress)) {
        logger_1.log.debug("Index server address is not set, using default");
        return "https://index.docker.io/v1/";
    }
    else {
        return info.IndexServerAddress;
    }
};
const isUndefinedOrEmpty = (value) => value === undefined || value.length === 0;
