"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.runInContainer = void 0;
const logger_1 = require("../../logger");
const docker_image_name_1 = require("../../docker-image-name");
const pull_image_1 = require("./image/pull-image");
const start_container_1 = require("./container/start-container");
const attach_container_1 = require("./container/attach-container");
const stream_utils_1 = require("../../stream-utils");
const runInContainer = (dockerode, indexServerAddress, image, command) => __awaiter(void 0, void 0, void 0, function* () {
    try {
        yield (0, pull_image_1.pullImage)(dockerode, indexServerAddress, { imageName: docker_image_name_1.DockerImageName.fromString(image), force: false });
        logger_1.log.debug(`Creating container: ${image} with command "${command.join(" ")}"...`);
        const container = yield dockerode.createContainer({ Image: image, Cmd: command });
        logger_1.log.debug(`Attaching to container...`, { containerId: container.id });
        const stream = yield (0, attach_container_1.attachContainer)(dockerode, container);
        logger_1.log.debug(`Starting container...`, { containerId: container.id });
        yield (0, start_container_1.startContainer)(container);
        logger_1.log.debug(`Waiting for container output...`, { containerId: container.id });
        const output = yield (0, stream_utils_1.streamToString)(stream, { trim: true });
        logger_1.log.debug(`Removing container...`, { containerId: container.id });
        yield container.remove({ force: true, v: true });
        return output.length === 0 ? undefined : output;
    }
    catch (err) {
        logger_1.log.error(`Failed to run command "${command.join(" ")}" in container: "${err}"`);
        return undefined;
    }
});
exports.runInContainer = runInContainer;
