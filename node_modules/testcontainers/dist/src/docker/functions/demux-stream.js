"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.demuxStream = void 0;
const stream_1 = require("stream");
const logger_1 = require("../../logger");
const demuxStream = (dockerode, stream) => __awaiter(void 0, void 0, void 0, function* () {
    try {
        const demuxedStream = new stream_1.PassThrough({ autoDestroy: true, encoding: "utf-8" });
        dockerode.modem.demuxStream(stream, demuxedStream, demuxedStream);
        stream.on("end", () => demuxedStream.end());
        demuxedStream.on("close", () => {
            if (!stream.destroyed) {
                stream.destroy();
            }
        });
        return demuxedStream;
    }
    catch (err) {
        logger_1.log.error(`Failed to demux stream: ${err}`);
        throw err;
    }
});
exports.demuxStream = demuxStream;
