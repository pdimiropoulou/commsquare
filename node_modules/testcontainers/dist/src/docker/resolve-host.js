"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.resolveHost = void 0;
const url_1 = require("url");
const logger_1 = require("../logger");
const run_in_container_1 = require("./functions/run-in-container");
const fs_1 = require("fs");
const resolveHost = (dockerode, containerRuntime, indexServerAddress, uri, allowUserOverrides, env = process.env) => __awaiter(void 0, void 0, void 0, function* () {
    if (allowUserOverrides) {
        if (env.TESTCONTAINERS_HOST_OVERRIDE !== undefined) {
            return env.TESTCONTAINERS_HOST_OVERRIDE;
        }
    }
    const { protocol, hostname } = new url_1.URL(uri);
    switch (protocol) {
        case "http:":
        case "https:":
        case "tcp:":
            return hostname;
        case "unix:":
        case "npipe:": {
            if (isInContainer()) {
                const networkName = containerRuntime === "podman" ? "podman" : "bridge";
                const gateway = yield findGateway(dockerode, networkName);
                if (gateway !== undefined) {
                    return gateway;
                }
                const defaultGateway = yield findDefaultGateway(dockerode, indexServerAddress);
                if (defaultGateway !== undefined) {
                    return defaultGateway;
                }
            }
            return "localhost";
        }
        default:
            throw new Error(`Unsupported protocol: ${protocol}`);
    }
});
exports.resolveHost = resolveHost;
const findGateway = (dockerode, networkName) => __awaiter(void 0, void 0, void 0, function* () {
    var _a, _b, _c;
    logger_1.log.debug(`Checking gateway for Docker host...`);
    const inspectResult = yield dockerode.getNetwork(networkName).inspect();
    return (_c = (_b = (_a = inspectResult === null || inspectResult === void 0 ? void 0 : inspectResult.IPAM) === null || _a === void 0 ? void 0 : _a.Config) === null || _b === void 0 ? void 0 : _b.find((config) => config.Gateway !== undefined)) === null || _c === void 0 ? void 0 : _c.Gateway;
});
const findDefaultGateway = (dockerode, indexServerAddress) => __awaiter(void 0, void 0, void 0, function* () {
    logger_1.log.debug(`Checking default gateway for Docker host...`);
    return (0, run_in_container_1.runInContainer)(dockerode, indexServerAddress, "alpine:3.14", [
        "sh",
        "-c",
        "ip route|awk '/default/ { print $3 }'",
    ]);
});
const isInContainer = () => (0, fs_1.existsSync)("/.dockerenv");
