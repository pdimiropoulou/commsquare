"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConfigurationStrategy = void 0;
const docker_client_config_1 = require("../docker-client-config");
const dockerode_1 = __importDefault(require("dockerode"));
const session_id_1 = require("../../session-id");
const url_1 = require("url");
const fs_1 = require("fs");
const path_1 = __importDefault(require("path"));
class ConfigurationStrategy {
    init() {
        return __awaiter(this, void 0, void 0, function* () {
            const { dockerHost, dockerTlsVerify, dockerCertPath } = yield (0, docker_client_config_1.getDockerClientConfig)();
            if (dockerHost) {
                this.dockerHost = dockerHost;
            }
            this.dockerTlsVerify = dockerTlsVerify;
            this.dockerCertPath = dockerCertPath;
        });
    }
    getDockerClient() {
        return __awaiter(this, void 0, void 0, function* () {
            const dockerOptions = { headers: { "x-tc-sid": session_id_1.sessionId } };
            const { pathname, hostname, port } = new url_1.URL(this.dockerHost);
            if (hostname !== "") {
                dockerOptions.host = hostname;
                dockerOptions.port = port;
            }
            else {
                dockerOptions.socketPath = pathname;
            }
            if (this.dockerTlsVerify === "1" && this.dockerCertPath !== undefined) {
                dockerOptions.ca = yield fs_1.promises.readFile(path_1.default.resolve(this.dockerCertPath, "ca.pem"));
                dockerOptions.cert = yield fs_1.promises.readFile(path_1.default.resolve(this.dockerCertPath, "cert.pem"));
                dockerOptions.key = yield fs_1.promises.readFile(path_1.default.resolve(this.dockerCertPath, "key.pem"));
            }
            return {
                uri: this.dockerHost,
                dockerode: new dockerode_1.default(dockerOptions),
                composeEnvironment: {
                    DOCKER_HOST: this.dockerHost,
                    DOCKER_TLS_VERIFY: this.dockerTlsVerify,
                    DOCKER_CERT_PATH: this.dockerCertPath,
                },
                allowUserOverrides: true,
            };
        });
    }
    isApplicable() {
        return this.dockerHost !== undefined;
    }
    getName() {
        return "ConfigurationStrategy";
    }
}
exports.ConfigurationStrategy = ConfigurationStrategy;
