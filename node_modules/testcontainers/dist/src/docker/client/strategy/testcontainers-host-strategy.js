"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TestcontainersHostStrategy = void 0;
const docker_client_config_1 = require("../docker-client-config");
const dockerode_1 = __importDefault(require("dockerode"));
const session_id_1 = require("../../session-id");
const url_1 = require("url");
class TestcontainersHostStrategy {
    init() {
        return __awaiter(this, void 0, void 0, function* () {
            const { tcHost } = yield (0, docker_client_config_1.getDockerClientConfig)();
            if (tcHost) {
                this.host = tcHost;
            }
        });
    }
    getDockerClient() {
        return __awaiter(this, void 0, void 0, function* () {
            const dockerOptions = { headers: { "x-tc-sid": session_id_1.sessionId } };
            const { hostname, port } = new url_1.URL(this.host);
            dockerOptions.host = hostname;
            dockerOptions.port = port;
            return {
                uri: this.host,
                dockerode: new dockerode_1.default(dockerOptions),
                composeEnvironment: {
                    DOCKER_HOST: this.host,
                },
                allowUserOverrides: false,
            };
        });
    }
    isApplicable() {
        return this.host !== undefined;
    }
    getName() {
        return "TestcontainersHostStrategy";
    }
}
exports.TestcontainersHostStrategy = TestcontainersHostStrategy;
