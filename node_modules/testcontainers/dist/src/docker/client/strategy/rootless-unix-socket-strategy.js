"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RootlessUnixSocketStrategy = void 0;
const type_guards_1 = require("../../../type-guards");
const fs_1 = require("fs");
const path_1 = __importDefault(require("path"));
const os_1 = __importDefault(require("os"));
const dockerode_1 = __importDefault(require("dockerode"));
class RootlessUnixSocketStrategy {
    constructor(platform = process.platform, env = process.env) {
        this.platform = platform;
        this.env = env;
    }
    init() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.platform !== "linux" && this.platform !== "darwin") {
                this.applicable = false;
                return;
            }
            this.socketPath = [
                this.getSocketPathFromEnv(),
                this.getSocketPathFromHomeRunDir(),
                this.getSocketPathFromHomeDesktopDir(),
                this.getSocketPathFromRunDir(),
            ]
                .filter(type_guards_1.isDefined)
                .find((candidateSocketPath) => (0, fs_1.existsSync)(candidateSocketPath));
            this.applicable = this.socketPath !== undefined;
        });
    }
    getSocketPathFromEnv() {
        const xdgRuntimeDir = this.env["XDG_RUNTIME_DIR"];
        if (xdgRuntimeDir !== undefined) {
            return path_1.default.join(xdgRuntimeDir, "docker.sock");
        }
        else {
            return undefined;
        }
    }
    getSocketPathFromHomeRunDir() {
        return path_1.default.join(os_1.default.homedir(), ".docker", "run", "docker.sock");
    }
    getSocketPathFromHomeDesktopDir() {
        return path_1.default.join(os_1.default.homedir(), ".docker", "desktop", "docker.sock");
    }
    getSocketPathFromRunDir() {
        return path_1.default.join("/run", "user", `${os_1.default.userInfo().uid}`, "docker.sock");
    }
    getDockerClient() {
        return __awaiter(this, void 0, void 0, function* () {
            return {
                uri: `unix://${this.socketPath}`,
                dockerode: new dockerode_1.default({ socketPath: this.socketPath }),
                composeEnvironment: {},
                allowUserOverrides: true,
            };
        });
    }
    isApplicable() {
        return this.applicable;
    }
    getName() {
        return "RootlessUnixSocketStrategy";
    }
}
exports.RootlessUnixSocketStrategy = RootlessUnixSocketStrategy;
