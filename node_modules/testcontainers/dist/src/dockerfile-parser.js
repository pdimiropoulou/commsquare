"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getDockerfileImages = void 0;
const os_1 = require("os");
const fs_1 = require("fs");
const logger_1 = require("./logger");
const docker_image_name_1 = require("./docker-image-name");
const type_guards_1 = require("./type-guards");
const buildArgRegex = /\${([^{]+)}/g;
const getDockerfileImages = (dockerfile, buildArgs) => __awaiter(void 0, void 0, void 0, function* () {
    try {
        return (yield parseImages(dockerfile))
            .map((line) => line.replace(buildArgRegex, (_, arg) => { var _a; return (_a = buildArgs[arg]) !== null && _a !== void 0 ? _a : ""; }))
            .map((line) => docker_image_name_1.DockerImageName.fromString(line));
    }
    catch (err) {
        logger_1.log.error(`Failed to read Dockerfile "${dockerfile}": ${err}`);
        throw err;
    }
});
exports.getDockerfileImages = getDockerfileImages;
function parseImages(dockerfile) {
    return __awaiter(this, void 0, void 0, function* () {
        return Array.from((yield fs_1.promises.readFile(dockerfile, "utf8"))
            .split(os_1.EOL)
            .filter((line) => line.toUpperCase().startsWith("FROM"))
            .map((line) => line.split(" ").filter(type_guards_1.isNotEmptyString)[1])
            .reduce((prev, next) => prev.add(next), new Set())
            .values());
    });
}
