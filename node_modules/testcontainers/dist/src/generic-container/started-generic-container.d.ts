/// <reference types="node" />
import { RestartOptions, StartedTestContainer, StopOptions, StoppedTestContainer } from "../test-container";
import Dockerode from "dockerode";
import { ExecResult, Labels } from "../docker/types";
import { InspectResult } from "../docker/functions/container/inspect-container";
import { BoundPorts } from "../bound-ports";
import { Readable } from "stream";
import { WaitStrategy } from "../wait-strategy/wait-strategy";
export declare class StartedGenericContainer implements StartedTestContainer {
    private readonly container;
    private readonly host;
    private inspectResult;
    private boundPorts;
    private readonly name;
    private readonly waitStrategy;
    private stoppedContainer?;
    private stopContainerLock;
    constructor(container: Dockerode.Container, host: string, inspectResult: InspectResult, boundPorts: BoundPorts, name: string, waitStrategy: WaitStrategy);
    protected containerIsStopping?(): Promise<void>;
    stop(options?: Partial<StopOptions>): Promise<StoppedTestContainer>;
    protected containerIsStopped?(): Promise<void>;
    restart(options?: Partial<RestartOptions>): Promise<void>;
    private stopContainer;
    getHost(): string;
    getFirstMappedPort(): number;
    getMappedPort(port: number): number;
    getId(): string;
    getName(): string;
    getLabels(): Labels;
    getNetworkNames(): string[];
    getNetworkId(networkName: string): string;
    getIpAddress(networkName: string): string;
    exec(command: string[]): Promise<ExecResult>;
    logs(): Promise<Readable>;
}
