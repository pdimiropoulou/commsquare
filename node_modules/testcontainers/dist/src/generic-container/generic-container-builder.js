"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GenericContainerBuilder = void 0;
const pull_policy_1 = require("../pull-policy");
const uuid_1 = require("../uuid");
const reaper_1 = require("../reaper");
const docker_image_name_1 = require("../docker-image-name");
const path_1 = __importDefault(require("path"));
const logger_1 = require("../logger");
const dockerfile_parser_1 = require("../dockerfile-parser");
const build_image_1 = require("../docker/functions/image/build-image");
const get_auth_config_1 = require("../registry-auth-locator/get-auth-config");
const generic_container_1 = require("./generic-container");
const docker_client_1 = require("../docker/client/docker-client");
const image_exists_1 = require("../docker/functions/image/image-exists");
class GenericContainerBuilder {
    constructor(context, dockerfileName, uuid = new uuid_1.RandomUuid()) {
        this.context = context;
        this.dockerfileName = dockerfileName;
        this.uuid = uuid;
        this.buildArgs = {};
        this.pullPolicy = new pull_policy_1.DefaultPullPolicy();
        this.cache = true;
    }
    withBuildArgs(buildArgs) {
        this.buildArgs = buildArgs;
        return this;
    }
    withPullPolicy(pullPolicy) {
        this.pullPolicy = pullPolicy;
        return this;
    }
    withCache(cache) {
        this.cache = cache;
        return this;
    }
    // https://github.com/containers/buildah/issues/1034
    build(image = `localhost/${this.uuid.nextUuid()}:${this.uuid.nextUuid()}`) {
        return __awaiter(this, void 0, void 0, function* () {
            const imageName = docker_image_name_1.DockerImageName.fromString(image);
            yield reaper_1.ReaperInstance.getInstance();
            const dockerfile = path_1.default.resolve(this.context, this.dockerfileName);
            logger_1.log.debug(`Preparing to build Dockerfile "${dockerfile}" as image "${imageName}"...`);
            const imageNames = yield (0, dockerfile_parser_1.getDockerfileImages)(dockerfile, this.buildArgs);
            const { dockerode, info } = yield (0, docker_client_1.getDockerClient)();
            const registryConfig = yield this.getRegistryConfig(info.dockerInfo.indexServerAddress, imageNames);
            yield (0, build_image_1.buildImage)({
                imageName: imageName,
                context: this.context,
                dockerfileName: this.dockerfileName,
                buildArgs: this.buildArgs,
                pullPolicy: this.pullPolicy,
                cache: this.cache,
                registryConfig,
            });
            const container = new generic_container_1.GenericContainer(imageName.toString());
            if (!(yield (0, image_exists_1.imageExists)(dockerode, imageName))) {
                throw new Error("Failed to build image");
            }
            return Promise.resolve(container);
        });
    }
    getRegistryConfig(indexServerAddress, imageNames) {
        return __awaiter(this, void 0, void 0, function* () {
            const authConfigs = [];
            yield Promise.all(imageNames.map((imageName) => __awaiter(this, void 0, void 0, function* () {
                var _a;
                const authConfig = yield (0, get_auth_config_1.getAuthConfig)((_a = imageName.registry) !== null && _a !== void 0 ? _a : indexServerAddress);
                if (authConfig !== undefined) {
                    authConfigs.push(authConfig);
                }
            })));
            return authConfigs
                .map((authConfig) => {
                return {
                    [authConfig.registryAddress]: {
                        username: authConfig.username,
                        password: authConfig.password,
                    },
                };
            })
                .reduce((prev, next) => (Object.assign(Object.assign({}, prev), next)), {});
        });
    }
}
exports.GenericContainerBuilder = GenericContainerBuilder;
