/// <reference types="node" />
import archiver from "archiver";
import { BoundPorts } from "../bound-ports";
import { PortWithOptionalBinding } from "../port";
import { PullPolicy } from "../pull-policy";
import { StartedTestContainer, TestContainer } from "../test-container";
import { WaitStrategy } from "../wait-strategy/wait-strategy";
import { BindMount, ContentToCopy, Environment, ExtraHost, FileToCopy, HealthCheck, Labels, ResourcesQuota, TmpFs, Ulimits } from "../docker/types";
import { CreateContainerOptions } from "../docker/functions/container/create-container";
import { InspectResult } from "../docker/functions/container/inspect-container";
import { GenericContainerBuilder } from "./generic-container-builder";
import { StartedNetwork } from "../network";
import { Readable } from "stream";
export declare class GenericContainer implements TestContainer {
    readonly image: string;
    static fromDockerfile(context: string, dockerfileName?: string): GenericContainerBuilder;
    protected opts: CreateContainerOptions;
    protected startupTimeout?: number;
    protected waitStrategy: WaitStrategy;
    protected tarToCopy?: archiver.Archiver;
    protected networkMode?: string;
    protected networkAliases: string[];
    protected pullPolicy: PullPolicy;
    protected logConsumer?: (stream: Readable) => unknown;
    constructor(image: string);
    /**
     * @deprecated Since version 9.4.0. Will be removed in version 10.0.0. Use `beforeContainerStarted` instead.
     */
    protected preStart?(): Promise<void>;
    protected beforeContainerStarted?(): Promise<void>;
    protected containerCreated?(containerId: string): Promise<void>;
    protected containerStarting?(inspectResult: InspectResult, reused: boolean): Promise<void>;
    start(): Promise<StartedTestContainer>;
    private reuseContainer;
    private startContainer;
    /**
     * @deprecated Since version 9.4.0. Will be removed in version 10.0.0. Use `containerStarted` instead.
     */
    protected postStart?(container: StartedTestContainer, inspectResult: InspectResult, boundPorts: BoundPorts): Promise<void>;
    protected containerStarted?(container: StartedTestContainer, inspectResult: InspectResult, reused: boolean): Promise<void>;
    protected get hasExposedPorts(): boolean;
    withCommand(command: string[]): this;
    withEntrypoint(entrypoint: string[]): this;
    withName(name: string): this;
    withLabels(labels: Labels): this;
    withEnvironment(environment: Environment): this;
    withTmpFs(tmpFs: TmpFs): this;
    withUlimits(ulimits: Ulimits): this;
    withAddedCapabilities(...capabilities: string[]): this;
    withDroppedCapabilities(...capabilities: string[]): this;
    withNetwork(network: StartedNetwork): this;
    withNetworkMode(networkMode: string): this;
    withNetworkAliases(...networkAliases: string[]): this;
    withExtraHosts(extraHosts: ExtraHost[]): this;
    withExposedPorts(...ports: PortWithOptionalBinding[]): this;
    withBindMounts(bindMounts: BindMount[]): this;
    withHealthCheck(healthCheck: HealthCheck): this;
    withStartupTimeout(startupTimeoutMs: number): this;
    withWaitStrategy(waitStrategy: WaitStrategy): this;
    withDefaultLogDriver(): this;
    withPrivilegedMode(): this;
    withUser(user: string): this;
    withReuse(): this;
    withPullPolicy(pullPolicy: PullPolicy): this;
    withIpcMode(ipcMode: string): this;
    withCopyFilesToContainer(filesToCopy: FileToCopy[]): this;
    withCopyContentToContainer(contentsToCopy: ContentToCopy[]): this;
    protected getTarToCopy(): archiver.Archiver;
    withWorkingDir(workingDir: string): this;
    withResourcesQuota({ memory, cpu }: ResourcesQuota): this;
    withLogConsumer(logConsumer: (stream: Readable) => unknown): this;
}
