"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.waitForContainer = void 0;
const logger_1 = require("./logger");
const stop_container_1 = require("./docker/functions/container/stop-container");
const remove_container_1 = require("./docker/functions/container/remove-container");
const waitForContainer = (container, waitStrategy, boundPorts, startTime) => __awaiter(void 0, void 0, void 0, function* () {
    logger_1.log.debug(`Waiting for container to be ready...`, { containerId: container.id });
    try {
        yield waitStrategy.waitUntilReady(container, boundPorts, startTime);
        logger_1.log.info(`Container is ready`, { containerId: container.id });
    }
    catch (err) {
        logger_1.log.error(`Container failed to be ready: ${err}`, { containerId: container.id });
        try {
            yield (0, stop_container_1.stopContainer)(container, { timeout: 0 });
            yield (0, remove_container_1.removeContainer)(container, { removeVolumes: true });
        }
        catch (stopErr) {
            logger_1.log.error(`Failed to stop container after it failed to be ready: ${stopErr}`, { containerId: container.id });
        }
        throw err;
    }
});
exports.waitForContainer = waitForContainer;
