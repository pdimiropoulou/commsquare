"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DockerComposeEnvironment = void 0;
const bound_ports_1 = require("../bound-ports");
const container_name_resolver_1 = require("../docker-compose/functions/container-name-resolver");
const started_generic_container_1 = require("../generic-container/started-generic-container");
const logger_1 = require("../logger");
const reaper_1 = require("../reaper");
const uuid_1 = require("../uuid");
const list_containers_1 = require("../docker/functions/container/list-containers");
const get_container_1 = require("../docker/functions/container/get-container");
const docker_client_1 = require("../docker/client/docker-client");
const inspect_container_1 = require("../docker/functions/container/inspect-container");
const container_logs_1 = require("../docker/functions/container/container-logs");
const started_docker_compose_environment_1 = require("./started-docker-compose-environment");
const docker_compose_down_1 = require("../docker-compose/functions/docker-compose-down");
const docker_compose_up_1 = require("../docker-compose/functions/docker-compose-up");
const wait_for_container_1 = require("../wait-for-container");
const pull_policy_1 = require("../pull-policy");
const docker_compose_pull_1 = require("../docker-compose/functions/docker-compose-pull");
const wait_1 = require("../wait-strategy/wait");
class DockerComposeEnvironment {
    constructor(composeFilePath, composeFiles, uuid = new uuid_1.RandomUuid()) {
        this.build = false;
        this.recreate = true;
        this.environmentFile = "";
        this.profiles = [];
        this.environment = {};
        this.pullPolicy = new pull_policy_1.DefaultPullPolicy();
        this.waitStrategy = {};
        this.composeFilePath = composeFilePath;
        this.composeFiles = composeFiles;
        this.projectName = `testcontainers-${uuid.nextUuid()}`;
    }
    withBuild() {
        this.build = true;
        return this;
    }
    withEnvironment(environment) {
        this.environment = Object.assign(Object.assign({}, this.environment), environment);
        return this;
    }
    withEnvironmentFile(environmentFile) {
        this.environmentFile = environmentFile;
        return this;
    }
    withProfiles(...profiles) {
        this.profiles = [...this.profiles, ...profiles];
        return this;
    }
    withNoRecreate() {
        this.recreate = false;
        this.projectName = "testcontainers-node";
        return this;
    }
    withPullPolicy(pullPolicy) {
        this.pullPolicy = pullPolicy;
        return this;
    }
    withWaitStrategy(containerName, waitStrategy) {
        this.waitStrategy[containerName] = waitStrategy;
        return this;
    }
    withStartupTimeout(startupTimeout) {
        this.startupTimeout = startupTimeout;
        return this;
    }
    up(services) {
        return __awaiter(this, void 0, void 0, function* () {
            logger_1.log.info(`Starting DockerCompose environment "${this.projectName}"...`);
            (yield reaper_1.ReaperInstance.getInstance()).addProject(this.projectName);
            const options = {
                filePath: this.composeFilePath,
                files: this.composeFiles,
                projectName: this.projectName,
            };
            const commandOptions = [];
            if (this.build) {
                commandOptions.push("--build");
            }
            if (!this.recreate) {
                commandOptions.push("--no-recreate");
            }
            const composeOptions = [];
            if (this.environmentFile) {
                composeOptions.push("--env-file", this.environmentFile);
            }
            this.profiles.forEach((profile) => composeOptions.push("--profile", profile));
            if (this.pullPolicy.shouldPull()) {
                yield (0, docker_compose_pull_1.dockerComposePull)(options, services);
            }
            yield (0, docker_compose_up_1.dockerComposeUp)(Object.assign(Object.assign({}, options), { commandOptions, composeOptions, environment: this.environment }), services);
            const startedContainers = (yield (0, list_containers_1.listContainers)()).filter((container) => container.Labels["com.docker.compose.project"] === this.projectName);
            const startedContainerNames = startedContainers.reduce((containerNames, startedContainer) => [
                ...containerNames,
                startedContainer.Names.join(", "),
            ], []);
            logger_1.log.info(`Started containers "${startedContainerNames.join('", "')}"`);
            const startedGenericContainers = (yield Promise.all(startedContainers.map((startedContainer) => __awaiter(this, void 0, void 0, function* () {
                const container = yield (0, get_container_1.getContainerById)(startedContainer.Id);
                const containerName = (0, container_name_resolver_1.resolveContainerName)(this.projectName, startedContainer.Names[0]);
                const { host, hostIps } = yield (0, docker_client_1.getDockerClient)();
                const inspectResult = yield (0, inspect_container_1.inspectContainer)(container);
                const boundPorts = bound_ports_1.BoundPorts.fromInspectResult(hostIps, inspectResult);
                const waitStrategy = this.waitStrategy[containerName]
                    ? this.waitStrategy[containerName]
                    : wait_1.Wait.forListeningPorts();
                if (this.startupTimeout !== undefined) {
                    waitStrategy.withStartupTimeout(this.startupTimeout);
                }
                if (logger_1.containerLog.enabled()) {
                    (yield (0, container_logs_1.containerLogs)(container))
                        .on("data", (data) => logger_1.containerLog.trace(`${containerName}: ${data.trim()}`))
                        .on("err", (data) => logger_1.containerLog.error(`${containerName}: ${data.trim()}`));
                }
                try {
                    yield (0, wait_for_container_1.waitForContainer)(container, waitStrategy, boundPorts);
                }
                catch (err) {
                    try {
                        yield (0, docker_compose_down_1.dockerComposeDown)(options, { removeVolumes: true, timeout: 0 });
                    }
                    catch (_a) {
                        logger_1.log.warn(`Failed to stop DockerCompose environment after failed up`);
                    }
                    throw err;
                }
                return new started_generic_container_1.StartedGenericContainer(container, host, inspectResult, boundPorts, containerName, waitStrategy);
            })))).reduce((map, startedGenericContainer) => {
                const containerName = startedGenericContainer.getName();
                return Object.assign(Object.assign({}, map), { [containerName]: startedGenericContainer });
            }, {});
            logger_1.log.info(`DockerCompose environment started`);
            return new started_docker_compose_environment_1.StartedDockerComposeEnvironment(startedGenericContainers, Object.assign(Object.assign({}, options), { composeOptions, environment: this.environment }));
        });
    }
}
exports.DockerComposeEnvironment = DockerComposeEnvironment;
