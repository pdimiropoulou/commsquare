"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.StartedDockerComposeEnvironment = void 0;
const logger_1 = require("../logger");
const docker_compose_down_1 = require("../docker-compose/functions/docker-compose-down");
const docker_compose_stop_1 = require("../docker-compose/functions/docker-compose-stop");
const stopped_docker_compose_environment_1 = require("./stopped-docker-compose-environment");
const downed_docker_compose_environment_1 = require("./downed-docker-compose-environment");
class StartedDockerComposeEnvironment {
    constructor(startedGenericContainers, options) {
        this.startedGenericContainers = startedGenericContainers;
        this.options = options;
    }
    stop() {
        return __awaiter(this, void 0, void 0, function* () {
            yield (0, docker_compose_stop_1.dockerComposeStop)(this.options);
            return new stopped_docker_compose_environment_1.StoppedDockerComposeEnvironment(this.options);
        });
    }
    down(options = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            const downOptions = Object.assign({ timeout: 0, removeVolumes: true }, options);
            yield (0, docker_compose_down_1.dockerComposeDown)(this.options, downOptions);
            return new downed_docker_compose_environment_1.DownedDockerComposeEnvironment();
        });
    }
    getContainer(containerName) {
        const container = this.startedGenericContainers[containerName];
        if (!container) {
            const error = `Cannot get container "${containerName}" as it is not running`;
            logger_1.log.error(error);
            throw new Error(error);
        }
        return container;
    }
}
exports.StartedDockerComposeEnvironment = StartedDockerComposeEnvironment;
