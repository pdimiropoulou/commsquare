"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.defaultDockerComposeOptions = void 0;
const docker_client_1 = require("../docker/client/docker-client");
const logger_1 = require("../logger");
const os_1 = require("os");
const type_guards_1 = require("../type-guards");
const defaultDockerComposeOptions = (_a) => __awaiter(void 0, void 0, void 0, function* () {
    var _b;
    var { environment = {} } = _a, options = __rest(_a, ["environment"]);
    const { composeEnvironment } = yield (0, docker_client_1.getDockerClient)();
    const log = (_b = options.logger) !== null && _b !== void 0 ? _b : logger_1.composeLog;
    return {
        log: false,
        callback: log.enabled()
            ? (chunk) => {
                chunk
                    .toString()
                    .split(os_1.EOL)
                    .filter(type_guards_1.isNotEmptyString)
                    .forEach((line) => log.trace(line.trim()));
            }
            : undefined,
        cwd: options.filePath,
        config: options.files,
        composeOptions: options.composeOptions,
        commandOptions: options.commandOptions,
        env: Object.assign(Object.assign(Object.assign(Object.assign({}, process.env), { COMPOSE_PROJECT_NAME: options.projectName }), composeEnvironment), environment),
    };
});
exports.defaultDockerComposeOptions = defaultDockerComposeOptions;
