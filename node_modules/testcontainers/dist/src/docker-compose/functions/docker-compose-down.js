"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.dockerComposeDown = void 0;
const logger_1 = require("../../logger");
const default_docker_compose_options_1 = require("../default-docker-compose-options");
const docker_compose_1 = require("docker-compose");
const dockerComposeDown = (options, downOptions) => __awaiter(void 0, void 0, void 0, function* () {
    logger_1.log.info(`Downing DockerCompose environment...`);
    try {
        yield (0, docker_compose_1.down)(Object.assign(Object.assign({}, (yield (0, default_docker_compose_options_1.defaultDockerComposeOptions)(options))), { commandOptions: commandOptions(downOptions) }));
        logger_1.log.info(`Downed DockerCompose environment`);
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
    }
    catch (err) {
        const errorMessage = err.err || err.message || err;
        logger_1.log.error(`Failed to down DockerCompose environment: ${errorMessage}`);
        throw new Error(errorMessage);
    }
});
exports.dockerComposeDown = dockerComposeDown;
const commandOptions = (options) => {
    const result = [];
    if (options.removeVolumes) {
        result.push("-v");
    }
    if (options.timeout) {
        result.push("-t", `${options.timeout / 1000}`);
    }
    return result;
};
