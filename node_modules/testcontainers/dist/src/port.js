"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.resolveHostPortBinding = exports.hasHostBinding = exports.getContainerPort = void 0;
const net = __importStar(require("net"));
const getContainerPort = (port) => typeof port === "number" ? port : port.container;
exports.getContainerPort = getContainerPort;
const hasHostBinding = (port) => {
    return typeof port === "object" && port.host !== undefined;
};
exports.hasHostBinding = hasHostBinding;
const resolveHostPortBinding = (hostIps, hostPortBindings) => {
    if (isDualStackIp(hostPortBindings)) {
        return hostPortBindings[0].hostPort;
    }
    for (const { family } of hostIps) {
        const hostPortBinding = hostPortBindings.find(({ hostIp }) => net.isIP(hostIp) === family);
        if (hostPortBinding !== undefined) {
            return hostPortBinding.hostPort;
        }
    }
    throw new Error("No host port found for host IP");
};
exports.resolveHostPortBinding = resolveHostPortBinding;
const isDualStackIp = (hostPortBindings) => hostPortBindings.length === 1 && hostPortBindings[0].hostIp === "";
