"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FixedPortGenerator = exports.RandomUniquePortGenerator = void 0;
const get_port_1 = __importDefault(require("get-port"));
class RandomPortGenerator {
    generatePort() {
        return (0, get_port_1.default)({ port: this.randomBetweenInclusive(10000, 65535) });
    }
    randomBetweenInclusive(min, max) {
        return Math.floor(Math.random() * (max - min + 1) + min);
    }
}
class RandomUniquePortGenerator {
    constructor(portGenerator = new RandomPortGenerator()) {
        this.portGenerator = portGenerator;
    }
    generatePort() {
        return __awaiter(this, void 0, void 0, function* () {
            let port;
            do {
                port = yield this.portGenerator.generatePort();
            } while (RandomUniquePortGenerator.assignedPorts.has(port));
            RandomUniquePortGenerator.assignedPorts.add(port);
            return port;
        });
    }
}
exports.RandomUniquePortGenerator = RandomUniquePortGenerator;
RandomUniquePortGenerator.assignedPorts = new Set();
class FixedPortGenerator {
    constructor(ports) {
        this.ports = ports;
        this.portIndex = 0;
    }
    generatePort() {
        return Promise.resolve(this.ports[this.portIndex++]);
    }
}
exports.FixedPortGenerator = FixedPortGenerator;
