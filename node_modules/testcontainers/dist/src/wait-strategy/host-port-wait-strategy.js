"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.HostPortWaitStrategy = void 0;
const port_check_1 = require("../port-check");
const logger_1 = require("../logger");
const retry_strategy_1 = require("../retry-strategy");
const wait_strategy_1 = require("./wait-strategy");
const docker_client_1 = require("../docker/client/docker-client");
class HostPortWaitStrategy extends wait_strategy_1.AbstractWaitStrategy {
    waitUntilReady(container, boundPorts) {
        return __awaiter(this, void 0, void 0, function* () {
            const { dockerode, containerRuntime, host } = yield (0, docker_client_1.getDockerClient)();
            const hostPortCheck = new port_check_1.HostPortCheck(host);
            const internalPortCheck = new port_check_1.InternalPortCheck(dockerode, containerRuntime, container);
            yield Promise.all([
                this.waitForHostPorts(hostPortCheck, container, boundPorts),
                this.waitForInternalPorts(internalPortCheck, container, boundPorts),
            ]);
        });
    }
    waitForHostPorts(portCheck, container, boundPorts) {
        return __awaiter(this, void 0, void 0, function* () {
            for (const [, hostPort] of boundPorts.iterator()) {
                logger_1.log.debug(`Waiting for host port ${hostPort}...`, { containerId: container.id });
                yield this.waitForPort(container, hostPort, portCheck);
                logger_1.log.debug(`Host port ${hostPort} ready`, { containerId: container.id });
            }
        });
    }
    waitForInternalPorts(portCheck, container, boundPorts) {
        return __awaiter(this, void 0, void 0, function* () {
            for (const [internalPort] of boundPorts.iterator()) {
                logger_1.log.debug(`Waiting for internal port ${internalPort}...`, { containerId: container.id });
                yield this.waitForPort(container, internalPort, portCheck);
                logger_1.log.debug(`Internal port ${internalPort} ready`, { containerId: container.id });
            }
        });
    }
    waitForPort(container, port, portCheck) {
        return __awaiter(this, void 0, void 0, function* () {
            yield new retry_strategy_1.IntervalRetryStrategy(100).retryUntil(() => portCheck.isBound(port), (isBound) => isBound, () => {
                const message = `Port ${port} not bound after ${this.startupTimeout}ms`;
                logger_1.log.error(message, { containerId: container.id });
                throw new Error(message);
            }, this.startupTimeout);
        });
    }
}
exports.HostPortWaitStrategy = HostPortWaitStrategy;
