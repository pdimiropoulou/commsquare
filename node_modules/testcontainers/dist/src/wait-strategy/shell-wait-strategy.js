"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ShellWaitStrategy = void 0;
const logger_1 = require("../logger");
const wait_strategy_1 = require("./wait-strategy");
const retry_strategy_1 = require("../retry-strategy");
const exec_container_1 = require("../docker/functions/container/exec-container");
const docker_client_1 = require("../docker/client/docker-client");
class ShellWaitStrategy extends wait_strategy_1.AbstractWaitStrategy {
    constructor(command) {
        super();
        this.command = command;
    }
    waitUntilReady(container) {
        return __awaiter(this, void 0, void 0, function* () {
            logger_1.log.debug(`Waiting for successful shell command "${this.command}"...`, { containerId: container.id });
            const { dockerode, containerRuntime } = yield (0, docker_client_1.getDockerClient)();
            yield new retry_strategy_1.IntervalRetryStrategy(100).retryUntil(() => __awaiter(this, void 0, void 0, function* () {
                const { exitCode } = yield (0, exec_container_1.execContainer)(dockerode, containerRuntime, container, ["/bin/sh", "-c", this.command], false);
                return exitCode;
            }), (exitCode) => exitCode === 0, () => {
                const message = `Shell command "${this.command}" not successful after ${this.startupTimeout}ms`;
                logger_1.log.error(message, { containerId: container.id });
                throw new Error(message);
            }, this.startupTimeout);
        });
    }
}
exports.ShellWaitStrategy = ShellWaitStrategy;
