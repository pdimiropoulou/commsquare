"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.StartupCheckStrategy = void 0;
const wait_strategy_1 = require("./wait-strategy");
const retry_strategy_1 = require("../retry-strategy");
const docker_client_1 = require("../docker/client/docker-client");
const logger_1 = require("../logger");
class StartupCheckStrategy extends wait_strategy_1.AbstractWaitStrategy {
    waitUntilReady(container) {
        return __awaiter(this, void 0, void 0, function* () {
            const { dockerode } = yield (0, docker_client_1.getDockerClient)();
            const startupStatus = yield new retry_strategy_1.IntervalRetryStrategy(1000).retryUntil(() => __awaiter(this, void 0, void 0, function* () { return yield this.checkStartupState(dockerode, container.id); }), (startupStatus) => startupStatus === "SUCCESS" || startupStatus === "FAIL", () => {
                const message = `Container not accessible after ${this.startupTimeout}ms`;
                logger_1.log.error(message, { containerId: container.id });
                return new Error(message);
            }, this.startupTimeout);
            if (startupStatus instanceof Error) {
                throw startupStatus;
            }
            else if (startupStatus === "FAIL") {
                throw new Error(`Container failed to start for ${container.id}`);
            }
        });
    }
}
exports.StartupCheckStrategy = StartupCheckStrategy;
