"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CompositeWaitStrategy = void 0;
const wait_strategy_1 = require("./wait-strategy");
const logger_1 = require("../logger");
class CompositeWaitStrategy extends wait_strategy_1.AbstractWaitStrategy {
    constructor(waitStrategies) {
        super();
        this.waitStrategies = waitStrategies;
    }
    waitUntilReady(container, boundPorts, startTime) {
        return __awaiter(this, void 0, void 0, function* () {
            logger_1.log.debug(`Waiting for composite...`, { containerId: container.id });
            return new Promise((resolve, reject) => {
                let deadlineTimeout;
                if (this.deadline !== undefined) {
                    deadlineTimeout = setTimeout(() => {
                        const message = `Composite wait strategy not successful after ${this.deadline}ms`;
                        logger_1.log.error(message, { containerId: container.id });
                        reject(new Error(message));
                    }, this.deadline);
                }
                Promise.all(this.waitStrategies.map((waitStrategy) => waitStrategy.waitUntilReady(container, boundPorts, startTime)))
                    .then(() => resolve())
                    .catch((err) => reject(err))
                    .finally(() => {
                    if (deadlineTimeout) {
                        clearTimeout(deadlineTimeout);
                    }
                });
            });
        });
    }
    withStartupTimeout(startupTimeout) {
        this.waitStrategies
            .filter((waitStrategy) => !waitStrategy.isStartupTimeoutSet())
            .forEach((waitStrategy) => waitStrategy.withStartupTimeout(startupTimeout));
        return this;
    }
    withDeadline(deadline) {
        this.deadline = deadline;
        return this;
    }
}
exports.CompositeWaitStrategy = CompositeWaitStrategy;
