"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LogWaitStrategy = void 0;
const logger_1 = require("../logger");
const container_logs_1 = require("../docker/functions/container/container-logs");
const byline_1 = __importDefault(require("byline"));
const wait_strategy_1 = require("./wait-strategy");
class LogWaitStrategy extends wait_strategy_1.AbstractWaitStrategy {
    constructor(message, times) {
        super();
        this.message = message;
        this.times = times;
    }
    waitUntilReady(container, boundPorts, startTime) {
        return __awaiter(this, void 0, void 0, function* () {
            logger_1.log.debug(`Waiting for log message "${this.message}"...`, { containerId: container.id });
            const stream = yield (0, container_logs_1.containerLogs)(container, { since: startTime });
            return new Promise((resolve, reject) => {
                const timeout = setTimeout(() => {
                    const message = `Log message "${this.message}" not received after ${this.startupTimeout}ms`;
                    logger_1.log.error(message, { containerId: container.id });
                    reject(new Error(message));
                }, this.startupTimeout);
                const comparisonFn = (line) => {
                    if (this.message instanceof RegExp) {
                        return this.message.test(line);
                    }
                    else {
                        return line.includes(this.message);
                    }
                };
                let count = 0;
                const lineProcessor = (line) => {
                    if (comparisonFn(line)) {
                        if (++count === this.times) {
                            stream.destroy();
                            clearTimeout(timeout);
                            resolve();
                        }
                    }
                };
                (0, byline_1.default)(stream)
                    .on("data", lineProcessor)
                    .on("err", lineProcessor)
                    .on("end", () => {
                    stream.destroy();
                    clearTimeout(timeout);
                    const message = `Log stream ended and message "${this.message}" was not received`;
                    logger_1.log.error(message, { containerId: container.id });
                    reject(new Error(message));
                });
            });
        });
    }
}
exports.LogWaitStrategy = LogWaitStrategy;
