"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getAuthConfig = void 0;
const path_1 = __importDefault(require("path"));
const os_1 = __importDefault(require("os"));
const fs_1 = require("fs");
const promises_1 = require("fs/promises");
const cred_helpers_1 = require("./cred-helpers");
const creds_store_1 = require("./creds-store");
const auths_1 = require("./auths");
const logger_1 = require("../logger");
const dockerConfigLocation = process.env.DOCKER_CONFIG || `${os_1.default.homedir()}/.docker`;
const dockerConfigFile = path_1.default.resolve(dockerConfigLocation, "config.json");
const readDockerConfig = () => __awaiter(void 0, void 0, void 0, function* () {
    if (process.env.DOCKER_AUTH_CONFIG) {
        return parseDockerConfig(process.env.DOCKER_AUTH_CONFIG);
    }
    else if ((0, fs_1.existsSync)(dockerConfigFile)) {
        return parseDockerConfig((yield (0, promises_1.readFile)(dockerConfigFile)).toString());
    }
    else {
        return Promise.resolve({});
    }
});
function parseDockerConfig(dockerConfig) {
    const object = JSON.parse(dockerConfig);
    return {
        credsStore: object.credsStore,
        credHelpers: object.credHelpers,
        auths: object.auths,
    };
}
const dockerConfig = readDockerConfig();
const registryAuthLocators = [new cred_helpers_1.CredHelpers(), new creds_store_1.CredsStore(), new auths_1.Auths()];
const authsCache = new Map();
const getAuthConfig = (registry) => __awaiter(void 0, void 0, void 0, function* () {
    if (authsCache.has(registry)) {
        logger_1.log.debug(`Auth config cache hit for registry "${registry}"`);
        return authsCache.get(registry);
    }
    for (const registryAuthLocator of registryAuthLocators) {
        const authConfig = yield registryAuthLocator.getAuthConfig(registry, yield dockerConfig);
        if (authConfig) {
            logger_1.log.debug(`Auth config found for registry "${registry}": ${registryAuthLocator.getName()}`);
            authsCache.set(registry, authConfig);
            return authConfig;
        }
    }
    logger_1.log.debug(`No registry auth locator found for registry "${registry}"`);
    authsCache.set(registry, undefined);
    return undefined;
});
exports.getAuthConfig = getAuthConfig;
