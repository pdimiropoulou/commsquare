"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CredentialProvider = void 0;
const logger_1 = require("../logger");
const child_process_1 = require("child_process");
const registry_matches_1 = require("./registry-matches");
class CredentialProvider {
    getAuthConfig(registry, dockerConfig) {
        return __awaiter(this, void 0, void 0, function* () {
            const credentialProviderName = this.getCredentialProviderName(registry, dockerConfig);
            if (!credentialProviderName) {
                return undefined;
            }
            const programName = `docker-credential-${credentialProviderName}`;
            logger_1.log.debug(`Executing Docker credential provider "${programName}"`);
            const credentials = yield this.listCredentials(programName);
            if (!Object.keys(credentials).some((aRegistry) => (0, registry_matches_1.registryMatches)(aRegistry, registry))) {
                logger_1.log.debug(`No credential found for registry "${registry}"`);
                return undefined;
            }
            const response = yield this.runCredentialProvider(registry, programName);
            return {
                username: response.Username,
                password: response.Secret,
                registryAddress: response.ServerURL,
            };
        });
    }
    listCredentials(providerName) {
        return new Promise((resolve, reject) => {
            (0, child_process_1.exec)(`${providerName} list`, (err, stdout) => {
                if (err) {
                    logger_1.log.error(`An error occurred listing credentials: ${err}`);
                    return reject(new Error("An error occurred listing credentials"));
                }
                try {
                    const response = JSON.parse(stdout);
                    return resolve(response);
                }
                catch (e) {
                    logger_1.log.error(`Unexpected response from Docker credential provider LIST command: "${stdout}"`);
                    return reject(new Error("Unexpected response from Docker credential provider LIST command"));
                }
            });
        });
    }
    runCredentialProvider(registry, providerName) {
        return new Promise((resolve, reject) => {
            const sink = (0, child_process_1.spawn)(providerName, ["get"]);
            const chunks = [];
            sink.stdout.on("data", (chunk) => chunks.push(chunk));
            sink.on("close", (code) => {
                if (code !== 0) {
                    logger_1.log.error(`An error occurred getting a credential: ${code}`);
                    return reject(new Error("An error occurred getting a credential"));
                }
                const response = chunks.join("");
                try {
                    const parsedResponse = JSON.parse(response);
                    return resolve(parsedResponse);
                }
                catch (e) {
                    logger_1.log.error(`Unexpected response from Docker credential provider GET command: "${response}"`);
                    return reject(new Error("Unexpected response from Docker credential provider GET command"));
                }
            });
            sink.stdin.write(`${registry}\n`);
            sink.stdin.end();
        });
    }
}
exports.CredentialProvider = CredentialProvider;
