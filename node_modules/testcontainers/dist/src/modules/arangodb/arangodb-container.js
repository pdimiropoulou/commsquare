"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.StartedArangoContainer = exports.ArangoDBContainer = void 0;
const __1 = require("../..");
const abstract_started_container_1 = require("../abstract-started-container");
const ARANGODB_PORT = 8529;
const USERNAME = "root";
class ArangoDBContainer extends __1.GenericContainer {
    constructor(image = "arangodb:3.10.0", password = "test") {
        super(image);
        this.password = password;
    }
    withPassword(password) {
        this.password = password;
        return this;
    }
    start() {
        const _super = Object.create(null, {
            start: { get: () => super.start }
        });
        return __awaiter(this, void 0, void 0, function* () {
            this.withExposedPorts(...(this.hasExposedPorts ? this.opts.exposedPorts : [ARANGODB_PORT]))
                .withWaitStrategy(__1.Wait.forLogMessage("Have fun!"))
                .withEnvironment({ ARANGO_ROOT_PASSWORD: this.password })
                .withStartupTimeout(120000);
            return new StartedArangoContainer(yield _super.start.call(this), this.password);
        });
    }
}
exports.ArangoDBContainer = ArangoDBContainer;
class StartedArangoContainer extends abstract_started_container_1.AbstractStartedContainer {
    constructor(startedTestContainer, password) {
        super(startedTestContainer);
        this.password = password;
        this.host = this.startedTestContainer.getHost();
        this.port = this.startedTestContainer.getMappedPort(ARANGODB_PORT);
    }
    getTcpUrl() {
        return `tcp://${this.host}:${this.port}/`;
    }
    getHttpUrl() {
        return `http://${this.host}:${this.port}/`;
    }
    getPassword() {
        return this.password;
    }
    getUsername() {
        return USERNAME;
    }
}
exports.StartedArangoContainer = StartedArangoContainer;
