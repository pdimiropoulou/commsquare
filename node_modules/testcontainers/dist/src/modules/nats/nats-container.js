"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.StartedNatsContainer = exports.NatsContainer = void 0;
const generic_container_1 = require("../../generic-container/generic-container");
const abstract_started_container_1 = require("../abstract-started-container");
const wait_1 = require("../../wait-strategy/wait");
const CLIENT_PORT = 4222;
const ROUTING_PORT_FOR_CLUSTERING = 6222;
const HTTP_MANAGEMENT_PORT = 8222;
const USER_ARGUMENT_KEY = "--user";
const PASS_ARGUMENT_KEY = "--pass";
class NatsContainer extends generic_container_1.GenericContainer {
    constructor(image = "nats:2.8.4-alpine") {
        super(image);
        this.args = {};
        this.args[USER_ARGUMENT_KEY] = "test";
        this.args[PASS_ARGUMENT_KEY] = "test";
    }
    withUsername(user) {
        this.args[USER_ARGUMENT_KEY] = user;
        return this;
    }
    withPass(pass) {
        this.args[PASS_ARGUMENT_KEY] = pass;
        return this;
    }
    withArg(name, value) {
        name = NatsContainer.ensureDashInFrontOfArgumentName(name);
        this.args[name] = value;
        return this;
    }
    static ensureDashInFrontOfArgumentName(name) {
        if (name.startsWith("--") || name.startsWith("-")) {
            return name;
        }
        if (name.length == 1) {
            return "-" + name;
        }
        else {
            return "--" + name;
        }
    }
    start() {
        const _super = Object.create(null, {
            start: { get: () => super.start }
        });
        return __awaiter(this, void 0, void 0, function* () {
            function buildCmdsFromArgs(args) {
                const result = [];
                result.push("nats-server");
                for (const argsKey in args) {
                    result.push(argsKey);
                    result.push(args[argsKey]);
                }
                return result;
            }
            this.withCommand(buildCmdsFromArgs(this.args))
                .withExposedPorts(...(this.hasExposedPorts
                ? this.opts.exposedPorts
                : [CLIENT_PORT, ROUTING_PORT_FOR_CLUSTERING, HTTP_MANAGEMENT_PORT]))
                .withWaitStrategy(wait_1.Wait.forLogMessage(/.*Server is ready.*/))
                .withStartupTimeout(120000);
            return new StartedNatsContainer(yield _super.start.call(this), this.getUser(), this.getPass());
        });
    }
    getUser() {
        return this.args[USER_ARGUMENT_KEY];
    }
    getPass() {
        return this.args[PASS_ARGUMENT_KEY];
    }
}
exports.NatsContainer = NatsContainer;
class StartedNatsContainer extends abstract_started_container_1.AbstractStartedContainer {
    constructor(startedTestContainer, username, password) {
        super(startedTestContainer);
        this.username = username;
        this.password = password;
        const port = startedTestContainer.getMappedPort(CLIENT_PORT);
        this.connectionOptions = {
            servers: `${this.startedTestContainer.getHost()}:${port}`,
            user: this.username,
            pass: this.password,
        };
    }
    getConnectionOptions() {
        return this.connectionOptions;
    }
}
exports.StartedNatsContainer = StartedNatsContainer;
