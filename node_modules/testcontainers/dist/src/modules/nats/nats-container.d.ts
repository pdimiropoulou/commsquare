import { GenericContainer } from "../../generic-container/generic-container";
import { StartedTestContainer } from "../../test-container";
import { AbstractStartedContainer } from "../abstract-started-container";
export declare class NatsContainer extends GenericContainer {
    private args;
    constructor(image?: string);
    withUsername(user: string): this;
    withPass(pass: string): this;
    withArg(name: string, value: string): this;
    private static ensureDashInFrontOfArgumentName;
    start(): Promise<StartedNatsContainer>;
    private getUser;
    private getPass;
}
export declare class StartedNatsContainer extends AbstractStartedContainer {
    readonly username: string;
    readonly password: string;
    private readonly connectionOptions;
    constructor(startedTestContainer: StartedTestContainer, username: string, password: string);
    getConnectionOptions(): NatsConnectionOptions;
}
export interface NatsConnectionOptions {
    debug?: boolean;
    maxPingOut?: number;
    maxReconnectAttempts?: number;
    name?: string;
    noEcho?: boolean;
    noRandomize?: boolean;
    pass?: string;
    pedantic?: boolean;
    pingInterval?: number;
    port?: number;
    reconnect?: boolean;
    reconnectDelayHandler?: () => number;
    reconnectJitter?: number;
    reconnectJitterTLS?: number;
    reconnectTimeWait?: number;
    servers?: Array<string> | string;
    timeout?: number;
    tls?: NatsTlsOptions;
    token?: string;
    user?: string;
    verbose?: boolean;
    waitOnFirstConnect?: boolean;
    ignoreClusterUpdates?: boolean;
    inboxPrefix?: string;
}
export interface NatsTlsOptions {
    certFile?: string;
    cert?: string;
    caFile?: string;
    ca?: string;
    keyFile?: string;
    key?: string;
}
