"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.StartedNeo4jContainer = exports.Neo4jContainer = void 0;
const __1 = require("../..");
const abstract_started_container_1 = require("../abstract-started-container");
const BOLT_PORT = 7687;
const HTTP_PORT = 7474;
const USERNAME = "neo4j";
class Neo4jContainer extends __1.GenericContainer {
    constructor(image = "neo4j:4.4.12") {
        super(image);
        this.password = "test";
        this.apoc = false;
    }
    withPassword(password) {
        this.password = password;
        return this;
    }
    withApoc() {
        this.apoc = true;
        return this;
    }
    withTtl(schedule = 5) {
        this.ttl = schedule;
        return this;
    }
    start() {
        const _super = Object.create(null, {
            start: { get: () => super.start }
        });
        return __awaiter(this, void 0, void 0, function* () {
            this.withExposedPorts(...(this.hasExposedPorts ? this.opts.exposedPorts : [BOLT_PORT, HTTP_PORT]))
                .withWaitStrategy(__1.Wait.forLogMessage("Started."))
                .withEnvironment({ NEO4J_AUTH: `${USERNAME}/${this.password}` })
                .withStartupTimeout(120000);
            if (this.apoc) {
                this.withEnvironment({
                    NEO4JLABS_PLUGINS: '["apoc"]',
                    NEO4J_dbms_security_procedures_unrestricted: "apoc.*",
                });
            }
            if (this.ttl) {
                this.withEnvironment({
                    NEO4J_apoc_ttl_enabled: "true",
                    NEO4J_apoc_ttl_schedule: this.ttl.toString(),
                });
            }
            return new StartedNeo4jContainer(yield _super.start.call(this), this.password);
        });
    }
}
exports.Neo4jContainer = Neo4jContainer;
class StartedNeo4jContainer extends abstract_started_container_1.AbstractStartedContainer {
    constructor(startedTestContainer, password) {
        super(startedTestContainer);
        this.password = password;
        this.boltPort = this.startedTestContainer.getMappedPort(BOLT_PORT);
        this.httpPort = this.startedTestContainer.getMappedPort(HTTP_PORT);
    }
    getBoltUri() {
        return `bolt://${this.getHost()}:${this.boltPort}/`;
    }
    getHttpUri() {
        return `http://${this.getHost()}:${this.httpPort}/`;
    }
    getPassword() {
        return this.password;
    }
    getUsername() {
        return USERNAME;
    }
}
exports.StartedNeo4jContainer = StartedNeo4jContainer;
