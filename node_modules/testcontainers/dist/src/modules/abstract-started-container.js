"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AbstractStartedContainer = void 0;
class AbstractStartedContainer {
    constructor(startedTestContainer) {
        this.startedTestContainer = startedTestContainer;
    }
    stop(options) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.containerStopping) {
                yield this.containerStopping();
            }
            const stoppedContainer = this.startedTestContainer.stop(options);
            if (this.containerStopped) {
                yield this.containerStopped();
            }
            return stoppedContainer;
        });
    }
    restart(options) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.startedTestContainer.restart(options);
        });
    }
    getHost() {
        return this.startedTestContainer.getHost();
    }
    getFirstMappedPort() {
        return this.startedTestContainer.getFirstMappedPort();
    }
    getMappedPort(port) {
        return this.startedTestContainer.getMappedPort(port);
    }
    getName() {
        return this.startedTestContainer.getName();
    }
    getLabels() {
        return this.startedTestContainer.getLabels();
    }
    getId() {
        return this.startedTestContainer.getId();
    }
    getNetworkNames() {
        return this.startedTestContainer.getNetworkNames();
    }
    getNetworkId(networkName) {
        return this.startedTestContainer.getNetworkId(networkName);
    }
    getIpAddress(networkName) {
        return this.startedTestContainer.getIpAddress(networkName);
    }
    exec(command) {
        return this.startedTestContainer.exec(command);
    }
    logs() {
        return this.startedTestContainer.logs();
    }
}
exports.AbstractStartedContainer = AbstractStartedContainer;
