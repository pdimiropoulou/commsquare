"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.StartedMySqlContainer = exports.MySqlContainer = void 0;
const generic_container_1 = require("../../generic-container/generic-container");
const abstract_started_container_1 = require("../abstract-started-container");
const MYSQL_PORT = 3306;
class MySqlContainer extends generic_container_1.GenericContainer {
    constructor(image = "mysql:8.0.31") {
        super(image);
        this.database = "test";
        this.username = "test";
        this.userPassword = "test";
        this.rootPassword = "test";
    }
    withDatabase(database) {
        this.database = database;
        return this;
    }
    withUsername(username) {
        this.username = username;
        return this;
    }
    withRootPassword(rootPassword) {
        this.rootPassword = rootPassword;
        return this;
    }
    withUserPassword(userPassword) {
        this.userPassword = userPassword;
        return this;
    }
    start() {
        const _super = Object.create(null, {
            start: { get: () => super.start }
        });
        return __awaiter(this, void 0, void 0, function* () {
            this.withExposedPorts(...(this.hasExposedPorts ? this.opts.exposedPorts : [MYSQL_PORT]))
                .withEnvironment({
                MYSQL_DATABASE: this.database,
                MYSQL_ROOT_PASSWORD: this.rootPassword,
                MYSQL_USER: this.username,
                MYSQL_PASSWORD: this.userPassword,
            })
                .withStartupTimeout(120000);
            return new StartedMySqlContainer(yield _super.start.call(this), this.database, this.username, this.userPassword, this.rootPassword);
        });
    }
}
exports.MySqlContainer = MySqlContainer;
class StartedMySqlContainer extends abstract_started_container_1.AbstractStartedContainer {
    constructor(startedTestContainer, database, username, userPassword, rootPassword) {
        super(startedTestContainer);
        this.database = database;
        this.username = username;
        this.userPassword = userPassword;
        this.rootPassword = rootPassword;
        this.port = startedTestContainer.getMappedPort(3306);
    }
    getPort() {
        return this.port;
    }
    getDatabase() {
        return this.database;
    }
    getUsername() {
        return this.username;
    }
    getUserPassword() {
        return this.userPassword;
    }
    getRootPassword() {
        return this.rootPassword;
    }
    executeQuery(query, additionalFlags = []) {
        return __awaiter(this, void 0, void 0, function* () {
            const result = yield this.startedTestContainer.exec([
                "mysql",
                "-h",
                "127.0.0.1",
                "-u",
                this.username,
                `-p${this.userPassword}`,
                "-e",
                `${query};`,
                ...additionalFlags,
            ]);
            if (result.exitCode !== 0) {
                throw new Error(`executeQuery failed with exit code ${result.exitCode} for query: ${query}`);
            }
            return result.output;
        });
    }
}
exports.StartedMySqlContainer = StartedMySqlContainer;
