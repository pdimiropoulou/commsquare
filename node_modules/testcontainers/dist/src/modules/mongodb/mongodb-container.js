"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.StartedMongoDBContainer = exports.MongoDBContainer = void 0;
const generic_container_1 = require("../../generic-container/generic-container");
const abstract_started_container_1 = require("../abstract-started-container");
const wait_1 = require("../../wait-strategy/wait");
const docker_image_name_1 = require("../../docker-image-name");
const MONGODB_PORT = 27017;
class MongoDBContainer extends generic_container_1.GenericContainer {
    constructor(image = "mongo:4.0.1") {
        super(image);
        this.dockerImageName = docker_image_name_1.DockerImageName.fromString(this.image);
    }
    start() {
        const _super = Object.create(null, {
            start: { get: () => super.start }
        });
        return __awaiter(this, void 0, void 0, function* () {
            this.withExposedPorts(MONGODB_PORT)
                .withCommand(["--replSet", "rs0"])
                .withWaitStrategy(wait_1.Wait.forLogMessage(/.*waiting for connections.*/i))
                .withStartupTimeout(120000);
            return new StartedMongoDBContainer(yield _super.start.call(this));
        });
    }
    containerStarted(startedTestContainer) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.initReplicaSet(startedTestContainer);
        });
    }
    initReplicaSet(startedTestContainer) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.executeMongoEvalCommand(startedTestContainer, "rs.initiate();");
            yield this.executeMongoEvalCommand(startedTestContainer, this.buildMongoWaitCommand());
        });
    }
    executeMongoEvalCommand(startedTestContainer, command) {
        return __awaiter(this, void 0, void 0, function* () {
            const execResult = yield startedTestContainer.exec(this.buildMongoEvalCommand(command));
            this.checkMongoNodeExitCode(execResult);
        });
    }
    buildMongoEvalCommand(command) {
        return [this.getMongoCmdBasedOnImageTag(), "--eval", command];
    }
    getMongoCmdBasedOnImageTag() {
        return parseInt(this.dockerImageName.tag[0]) >= 5 ? "mongosh" : "mongo";
    }
    checkMongoNodeExitCode(execResult) {
        const { exitCode, output } = execResult;
        if (execResult.exitCode !== 0) {
            throw new Error(`Error running mongo command. Exit code ${exitCode}: ${output}`);
        }
    }
    buildMongoWaitCommand() {
        return `
    var attempt = 0;
    while(db.runCommand({isMaster: 1}).ismaster==false) {
      if (attempt > 60) {
        quit(1);
      }
      print(attempt); sleep(100); attempt++; 
    }
    `;
    }
}
exports.MongoDBContainer = MongoDBContainer;
class StartedMongoDBContainer extends abstract_started_container_1.AbstractStartedContainer {
    constructor(startedTestContainer) {
        super(startedTestContainer);
    }
    getConnectionString() {
        return `mongodb://${this.getHost()}:${this.getMappedPort(MONGODB_PORT)}`;
    }
}
exports.StartedMongoDBContainer = StartedMongoDBContainer;
