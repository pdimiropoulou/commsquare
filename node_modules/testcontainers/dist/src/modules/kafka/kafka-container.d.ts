import { GenericContainer } from "../../generic-container/generic-container";
import { StartedTestContainer } from "../..";
import { AbstractStartedContainer } from "../abstract-started-container";
import { InspectResult } from "../../docker/functions/container/inspect-container";
import { Content } from "../../docker/types";
export declare const KAFKA_IMAGE = "confluentinc/cp-kafka:7.2.2";
interface SaslSslListenerOptions {
    sasl: SaslOptions;
    port: number;
    keystore: PKCS12CertificateStore;
    truststore?: PKCS12CertificateStore;
}
interface SaslOptions {
    mechanism: "SCRAM-SHA-256" | "SCRAM-SHA-512";
    user: User;
}
interface User {
    name: string;
    password: string;
}
interface PKCS12CertificateStore {
    content: Content;
    passphrase: string;
}
export declare class KafkaContainer extends GenericContainer {
    private readonly uuid;
    private isZooKeeperProvided;
    private zooKeeperHost?;
    private zooKeeperPort?;
    private saslSslConfig?;
    constructor(image?: string);
    withZooKeeper(host: string, port: number): this;
    withSaslSslListener(options: SaslSslListenerOptions): this;
    protected beforeContainerStarted(): Promise<void>;
    start(): Promise<StartedKafkaContainer>;
    protected containerStarted(container: StartedTestContainer, inspectResult: InspectResult): Promise<void>;
    private addPlaintextAndSecureListener;
    private addPlaintextListener;
    private updateAdvertisedListeners;
    private createUser;
}
export declare class StartedKafkaContainer extends AbstractStartedContainer {
    constructor(startedTestContainer: StartedTestContainer);
}
export {};
